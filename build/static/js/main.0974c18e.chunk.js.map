{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movies","content","showPopup","handleOnClick","bind","assertThisInitialized","handleOnClose","self","axios","get","then","response","setState","data","Search","catch","err","console","error","imdbID","url","document","body","classList","add","remove","list","_","map","movie","i","react_default","a","createElement","key","className","Poster","src","Title","Year","onClick","e","popupClassName","thisMovie","imgLink","id","Actors","Type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","title","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0974c18e.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport _ from \"lodash\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: [],\n      content: {},\n      showPopup: false\n    };\n\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.handleOnClose = this.handleOnClose.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    axios\n      .get(\"http://www.omdbapi.com/?i=tt3896198&apikey=81f5bea7&s=marvel\")\n      .then((response) => {\n        self.setState({ movies: response.data.Search })\n      }).catch(function (err) { console.error(err); });\n  }\n\n  handleOnClick(imdbID) {\n    var self = this;\n    var url = \"http://www.omdbapi.com/?apikey=81f5bea7&i=\" + imdbID;\n    axios\n      .get(url)\n      .then(function (response) {\n        self.setState({ content: response.data })\n      })\n\t  document.body.classList.add('open');\n\t  this.setState({ showPopup: true });\n  }\n\n  handleOnClose() {\n\tdocument.body.classList.remove('open');\n    this.setState({ showPopup: false });\n  }\n\n  render() {\n\tvar self = this;\n    var list = _.map(this.state.movies, function (movie, i) {\n\tvar imgLink = 'img/no-image.jpg';\n\treturn (<li key={\"movie-\" + i} className=\"Movie-items\">\n\t  <figure className=\"Movie-items-img\">\n\t  { movie.Poster === \"N/A\" ? <img src={imgLink}></img> : <img src={movie.Poster}></img> }\n   \t  </figure>\n      <h3 className=\"Movie-items-title\">{movie.Title}</h3>\n      <p className=\"Movie-items-text\">{movie.Year}\n        <button onClick={e => self.handleOnClick(movie.imdbID)} >MORE INFO</button>\n      </p>\n      </li>);\n    });\n\n    var popupClassName = \"\";\n    if (this.state.showPopup) {\n      popupClassName = \"show\";\n    }\n\n\tvar thisMovie = this.state.content;\n\tif(thisMovie.Poster === \"N/A\"){\n\t\tvar imgLink = 'img/no-image.jpg';\n\t} else {\n\t\tvar imgLink = thisMovie.Poster;\n\t}\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\t\t\t<h1>MARVEL ARCHIVES</h1>\n        </header>\n        <section>\n          <ul className=\"Movie\">\n\t          {list}\n\t\t  </ul>\n        </section>\n        <div id=\"PopUp\" className={popupClassName}>\n\t\t\t<div className=\"PopUp-wrapper\">\n\t\t\t\t<button onClick={this.handleOnClose}>close</button>\n\t\t\t\t<div className=\"PopUp-inner\">\n\t\t\t\t\t<figure className=\"PopUp-inner-img\">\n\t\t\t\t\t<img src={imgLink}></img>\n\t\t\t\t\t</figure>\n\t\t\t\t\t<div className=\"PopUp-inner-details\">\n\t\t\t\t\t\t<h3>{thisMovie.Title}</h3>\n\t\t\t\t\t\t<dl>\n\t\t\t\t\t\t\t<dt>Year</dt>\n\t\t\t\t\t\t\t<dd>{thisMovie.Year}</dd>\n\t\t\t\t\t\t\t<dt>Actors</dt>\n\t\t\t\t\t\t\t<dd>{thisMovie.Actors}</dd>\n\t\t\t\t\t\t\t<dt>Type</dt>\n\t\t\t\t\t\t\t<dd>{thisMovie.Type}</dd>\n\t\t\t\t\t\t</dl>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App title={\"Movie List\"} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}